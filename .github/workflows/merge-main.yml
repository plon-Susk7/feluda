name: Merge PR to main

permissions:
  contents: read

on:
  pull_request:
    types:
      - closed
      # - opened
      # - reopened
      # - synchronize
    branches:
      - main


jobs:
  release:
    runs-on: ubuntu-latest
    concurrency: release
    permissions:
      contents: write

    if: github.event.pull_request.merged == true  # Ensure the PR was merged
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Python version
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies for Semantic Versioning
        run: |
          python -m pip install --upgrade pip
          pip install tomli tomli-w

      - name: Get Base and Latest Commits of the Merged PR
        id: commit-range
        run: |
          # Get the base commit of the PR (the commit where it diverged from the main branch)
          BASE_COMMIT=$(git merge-base HEAD^ origin/main)

          # Get the commits introduced by this PR
          COMMITS=$(git rev-list --reverse $BASE_COMMIT..HEAD)

          # Extract the first and last commits
          FIRST_COMMIT=$(echo "$COMMITS" | head -n 1)
          LATEST_COMMIT=$(echo "$COMMITS" | tail -n 1)

          # Set outputs for later steps
          echo "base_commit=$BASE_COMMIT" >> $GITHUB_OUTPUT
          echo "first_commit=$FIRST_COMMIT" >> $GITHUB_OUTPUT
          echo "latest_commit=$LATEST_COMMIT" >> $GITHUB_OUTPUT

          # Log for debugging
          echo "Base Commit: $BASE_COMMIT"
          echo "First Commit in PR: $FIRST_COMMIT"
          echo "Latest Commit in PR: $LATEST_COMMIT"

      - name: Run Dynamic Semantic Release Script
        env:
          FIRST_COMMIT: ${{ steps.commit-range.outputs.first_commit }}
          LATEST_COMMIT: ${{ steps.commit-range.outputs.latest_commit }}
        run: |
          pwd
          # run the script
          python -m scripts.bump "$FIRST_COMMIT" "$LATEST_COMMIT"

      - name: Commit and Push Changes
        run: |
          # Configure git user
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

          # Check if there are any changes
          if [[ -n $(git status -s) ]]; then
            # Add all changes
            git add .
            # Commit changes
            git commit -m "chore: bump version and update related files"
            # Push changes
            git push

            git fetch --tags

            UNPUSHED_TAGS=$(comm -23 \
            <(git tag | grep -E '^feluda-[0-9]+\.[0-9]+\.[0-9]+$' | sort) \
            <(git ls-remote --tags origin | awk -F'/' '{print $NF}' | grep -E '^feluda-[0-9]+\.[0-9]+\.[0-9]+$' | sort))

            # Debug: Log the unpushed tags
            echo "Unpushed tags: $UNPUSHED_TAGS"

            if [[ -n "$UNPUSHED_TAGS" ]]; then
              # push tags
              git push --tags

              # Releasing the package
              gh release create "$UNPUSHED_TAGS" \
                --repo="$GITHUB_REPOSITORY" \
                --title="$UNPUSHED_TAGS" \
                --generate-notes \
            else:
              echo "No tags to push"
            fi
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
     

